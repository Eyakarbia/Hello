{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener, ViewChild } from '@angular/core';\nlet ErrorComponent = class ErrorComponent {\n  constructor() {\n    this._tetris = undefined;\n    this.bw = false;\n    this.moveLeft = false;\n    this.moveDown = false;\n    this.moveRight = false;\n    this.rotate = false;\n    this.start = false;\n    this.stop = false;\n    this.reset = false;\n  }\n  onLineCleared() {\n    console.log('line cleared');\n  }\n  onGameOver() {\n    alert('game over');\n  }\n  onRotateButtonPressed() {\n    this._tetris.actionRotate();\n  }\n  handleKeyboardEvent(event) {\n    switch (event.key) {\n      case 'ArrowLeft':\n        this._tetris.actionLeft();\n        break;\n      case 'ArrowRight':\n        this._tetris.actionRight();\n        break;\n      case 'ArrowUp':\n        this._tetris.actionRotate();\n        break;\n      case 'ArrowDown':\n        this._tetris.actionDown();\n        break;\n      case ' ':\n        // Space key for starting the game\n        this._tetris.actionStart();\n        break;\n      case 'p':\n        // 'p' key for stopping the game\n        this._tetris.actionStop();\n        break;\n      case 'r':\n        // 'r' key for resetting the game\n        this._tetris.actionReset();\n        break;\n      case 'd':\n        // 'r' key for resetting the game\n        this._tetris.actionDrop();\n        break;\n    }\n  }\n};\n__decorate([ViewChild('game')], ErrorComponent.prototype, \"_tetris\", void 0);\n__decorate([HostListener('document:keydown', ['$event'])], ErrorComponent.prototype, \"handleKeyboardEvent\", null);\nErrorComponent = __decorate([Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})], ErrorComponent);\nexport { ErrorComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,SAAS,QAAQ,eAAe;AAQ3D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAApBC;IAGG,YAAO,GAAwBC,SAAgB;IAEhD,OAAE,GAAG,KAAK;IACV,aAAQ,GAAG,KAAK;IAChB,aAAQ,GAAG,KAAK;IAChB,cAAS,GAAG,KAAK;IACjB,WAAM,GAAG,KAAK;IACd,UAAK,GAAG,KAAK;IACb,SAAI,GAAG,KAAK;IACZ,UAAK,GAAG,KAAK;EA+CtB;EA3CSC,aAAa;IAChBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC/B;EAEOC,UAAU;IACbC,KAAK,CAAC,WAAW,CAAC;EACtB;EAEOC,qBAAqB;IACxB,IAAI,CAACC,OAAO,CAACC,YAAY,EAAE;EAC/B;EAEAC,mBAAmB,CAACC,KAAoB;IACtC,QAAQA,KAAK,CAACC,GAAG;MACf,KAAK,WAAW;QACd,IAAI,CAACJ,OAAO,CAACK,UAAU,EAAE;QACzB;MACF,KAAK,YAAY;QACf,IAAI,CAACL,OAAO,CAACM,WAAW,EAAE;QAC1B;MACF,KAAK,SAAS;QACZ,IAAI,CAACN,OAAO,CAACC,YAAY,EAAE;QAC3B;MACF,KAAK,WAAW;QACd,IAAI,CAACD,OAAO,CAACO,UAAU,EAAE;QACzB;MACA,KAAK,GAAG;QAAE;QACV,IAAI,CAACP,OAAO,CAACQ,WAAW,EAAE;QAC1B;MACF,KAAK,GAAG;QAAE;QACR,IAAI,CAACR,OAAO,CAACS,UAAU,EAAE;QACzB;MACF,KAAK,GAAG;QAAE;QACR,IAAI,CAACT,OAAO,CAACU,WAAW,EAAE;QAC1B;MACA,KAAK,GAAG;QAAE;QACV,IAAI,CAACV,OAAO,CAACW,UAAU,EAAE;QACzB;IAAM;EAGZ;CAGD;AAxDCC,YADCtB,SAAS,CAAC,MAAM,CAAC,+CACsC;AAyBxDsB,YADCvB,YAAY,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,CAAC,yDA6B5C;AAxDUE,cAAc,eAL1BH,SAAS,CAAC;EACTyB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWxB,cAAc,CA2D1B;SA3DYA,cAAc","names":["Component","HostListener","ViewChild","ErrorComponent","constructor","undefined","onLineCleared","console","log","onGameOver","alert","onRotateButtonPressed","_tetris","actionRotate","handleKeyboardEvent","event","key","actionLeft","actionRight","actionDown","actionStart","actionStop","actionReset","actionDrop","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Tasnim\\OneDrive\\Desktop\\Tetris\\Hello\\front\\src\\app\\views\\error\\error.component.ts"],"sourcesContent":["import { Component, HostListener, ViewChild } from '@angular/core';\nimport {TetrisCoreComponent} from 'ngx-tetris';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent  {\n\n  @ViewChild('game')\n  private _tetris: TetrisCoreComponent = undefined as any;\n\n  public bw = false;\n  public moveLeft = false;\n  public moveDown = false;\n  public moveRight = false;\n  public rotate = false;\n  public start = false;\n  public stop = false;\n  public reset = false;\n\n\n\n  public onLineCleared() {\n      console.log('line cleared');\n  }\n\n  public onGameOver() {\n      alert('game over');\n  }\n\n  public onRotateButtonPressed() {\n      this._tetris.actionRotate();\n  }\n  @HostListener('document:keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'ArrowLeft':\n        this._tetris.actionLeft();\n        break;\n      case 'ArrowRight':\n        this._tetris.actionRight();\n        break;\n      case 'ArrowUp':\n        this._tetris.actionRotate();\n        break;\n      case 'ArrowDown':\n        this._tetris.actionDown();\n        break;\n        case ' ': // Space key for starting the game\n        this._tetris.actionStart();\n        break;\n      case 'p': // 'p' key for stopping the game\n        this._tetris.actionStop();\n        break;\n      case 'r': // 'r' key for resetting the game\n        this._tetris.actionReset();\n        break;\n        case 'd': // 'r' key for resetting the game\n        this._tetris.actionDrop();\n        break;\n\n    }\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}