{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs/internal/Subject';\nfunction BoardComponent_tile_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tile\", 1);\n  }\n  if (rf & 2) {\n    const tileData_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", tileData_r1);\n  }\n}\nvar PieceRotation;\n(function (PieceRotation) {\n  PieceRotation[PieceRotation[\"DEG_0\"] = 0] = \"DEG_0\";\n  PieceRotation[PieceRotation[\"DEG_90\"] = 1] = \"DEG_90\";\n  PieceRotation[PieceRotation[\"DEG_180\"] = 2] = \"DEG_180\";\n  PieceRotation[PieceRotation[\"DEG_270\"] = 3] = \"DEG_270\";\n})(PieceRotation || (PieceRotation = {}));\nvar PieceTypes;\n(function (PieceTypes) {\n  PieceTypes[PieceTypes[\"Dot\"] = 1] = \"Dot\";\n  PieceTypes[PieceTypes[\"Box\"] = 2] = \"Box\";\n  PieceTypes[PieceTypes[\"Line\"] = 3] = \"Line\";\n  PieceTypes[PieceTypes[\"T\"] = 4] = \"T\";\n  PieceTypes[PieceTypes[\"L\"] = 5] = \"L\";\n  PieceTypes[PieceTypes[\"Lr\"] = 6] = \"Lr\";\n  PieceTypes[PieceTypes[\"Z\"] = 7] = \"Z\";\n  PieceTypes[PieceTypes[\"S\"] = 8] = \"S\";\n})(PieceTypes || (PieceTypes = {}));\n// picked from https://www.romanzolotarev.com/pico-8-color-palette/\nvar PieceColors;\n(function (PieceColors) {\n  PieceColors[\"Box\"] = \"color-box\";\n  PieceColors[\"Dot\"] = \"color-dot\";\n  PieceColors[\"Line\"] = \"color-line\";\n  PieceColors[\"T\"] = \"color-t\";\n  PieceColors[\"L\"] = \"color-l\";\n  PieceColors[\"Lr\"] = \"color-lr\";\n  PieceColors[\"Z\"] = \"color-z\";\n  PieceColors[\"S\"] = \"color-s\";\n})(PieceColors || (PieceColors = {}));\nclass Piece {\n  constructor(x, y, gridSize, maps) {\n    this.color = 'red';\n    this.rotation = PieceRotation.DEG_0;\n    this.map = [[], []];\n    this._lastConfig = null;\n    this._gridSize = gridSize;\n    this.x = x;\n    this.y = y;\n    this._maps = maps;\n    this.map = this._maps[this.rotation];\n  }\n  get positionsOnGrid() {\n    const acc = [];\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.map[row][col]) {\n          const pos = (this.y + row) * this._gridSize.width + this.x + col;\n          if (pos > 0) {\n            acc.push(pos);\n          }\n        }\n      }\n    }\n    return acc;\n  }\n  store() {\n    this._lastConfig = {\n      x: this.x,\n      y: this.y,\n      rotation: this.rotation,\n      map: this.map\n    };\n  }\n  clearStore() {\n    this._lastConfig = null;\n  }\n  revert() {\n    if (this._lastConfig) {\n      for (const x in this._lastConfig) {\n        if (this._lastConfig.hasOwnProperty(x)) {\n          // @ts-ignore\n          this[x] = this._lastConfig[x];\n        }\n      }\n      this._lastConfig = null;\n    }\n  }\n  rotate() {\n    const keys = Object.keys(this._maps);\n    let idx = keys.indexOf(this.rotation.toString());\n    if (idx >= keys.length - 1) {\n      this.rotation = keys[0];\n    } else {\n      this.rotation = keys[++idx];\n    }\n    this.map = this._maps[this.rotation];\n  }\n  moveDown() {\n    this.y++;\n  }\n  moveRight() {\n    this.x++;\n  }\n  moveLeft() {\n    this.x--;\n  }\n  get bottomRow() {\n    return this.y + 3;\n  }\n  get rightCol() {\n    let col = 3;\n    while (col >= 0) {\n      for (let row = 0; row <= 3; row++) {\n        if (this.map[row][col]) {\n          return this.x + col;\n        }\n      }\n      col--;\n    }\n    return 0;\n  }\n  get leftCol() {\n    return this.x;\n  }\n}\nconst MAPS$7 = [];\nMAPS$7[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Box, undefined, undefined, undefined]];\nclass Dot extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$7);\n    this.color = PieceColors['Dot'];\n  }\n}\nconst MAPS$6 = [];\nMAPS$6[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Box, PieceTypes.Box, undefined, undefined], [PieceTypes.Box, PieceTypes.Box, undefined, undefined]];\nclass Box extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$6);\n    this.color = PieceColors['Box'];\n  }\n}\nconst MAPS$5 = [];\nMAPS$5[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Line, PieceTypes.Line, PieceTypes.Line, PieceTypes.Line]];\nMAPS$5[PieceRotation.DEG_90] = [[PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined]];\nclass Line extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$5);\n    this.color = PieceColors['Line'];\n  }\n}\nconst MAPS$4 = [];\nMAPS$4[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined], [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined]];\nMAPS$4[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [PieceTypes.T, undefined, undefined, undefined], [PieceTypes.T, PieceTypes.T, undefined, undefined], [PieceTypes.T, undefined, undefined, undefined]];\nMAPS$4[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined], [undefined, PieceTypes.T, undefined, undefined]];\nMAPS$4[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined], [PieceTypes.T, PieceTypes.T, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined]];\nclass T extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$4);\n    this.color = PieceColors['T'];\n  }\n}\nconst MAPS$3 = [];\nMAPS$3[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, PieceTypes.Z, undefined, undefined], [PieceTypes.Z, PieceTypes.Z, undefined, undefined], [PieceTypes.Z, undefined, undefined, undefined]];\nMAPS$3[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Z, PieceTypes.Z, undefined, undefined], [undefined, PieceTypes.Z, PieceTypes.Z, undefined]];\nclass Z extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$3);\n    this.color = PieceColors['Z'];\n  }\n}\nconst MAPS$2 = [];\nMAPS$2[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.S, undefined, undefined, undefined], [PieceTypes.S, PieceTypes.S, undefined, undefined], [undefined, PieceTypes.S, undefined, undefined]];\nMAPS$2[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, PieceTypes.S, PieceTypes.S, undefined], [PieceTypes.S, PieceTypes.S, undefined, undefined]];\nclass S extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$2);\n    this.color = PieceColors['S'];\n  }\n}\nconst MAPS$1 = [];\nMAPS$1[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.L, undefined, undefined, undefined], [PieceTypes.L, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, undefined, undefined]];\nMAPS$1[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined], [PieceTypes.L, undefined, undefined, undefined]];\nMAPS$1[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, undefined, undefined], [undefined, PieceTypes.L, undefined, undefined], [undefined, PieceTypes.L, undefined, undefined]];\nMAPS$1[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, PieceTypes.L, undefined], [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined]];\nclass L extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$1);\n    this.color = PieceColors['L'];\n  }\n}\nconst MAPS = [];\nMAPS[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined], [undefined, PieceTypes.Lr, undefined, undefined], [undefined, PieceTypes.Lr, undefined, undefined]];\nMAPS[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, PieceTypes.Lr, undefined], [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined]];\nMAPS[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [PieceTypes.Lr, undefined, undefined, undefined], [PieceTypes.Lr, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined]];\nMAPS[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined], [PieceTypes.Lr, undefined, undefined, undefined]];\nclass Lr extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS);\n    this.color = PieceColors['Lr'];\n  }\n}\nclass PiecesFactory {\n  constructor(_gridSize) {\n    this._gridSize = _gridSize;\n    this._available = [];\n    // @ts-ignore\n    this._available.push(Dot);\n    // @ts-ignore\n    this._available.push(Box);\n    // @ts-ignore\n    this._available.push(Line);\n    // @ts-ignore\n    this._available.push(T);\n    // @ts-ignore\n    this._available.push(Z);\n    // @ts-ignore\n    this._available.push(S);\n    // @ts-ignore\n    this._available.push(L);\n    // @ts-ignore\n    this._available.push(Lr);\n  }\n  getRandomPiecePiece(x, y) {\n    const idx = Math.floor(Math.random() * this._available.length);\n    // @ts-ignore\n    return new this._available[idx](x, y, this._gridSize);\n    // return new this._available[2](x, y, this._gridSize);\n  }\n}\n\nconst SPAWN_POSITION_X = 4;\nconst SPAWN_POSITION_Y = -4;\nclass Tile {\n  constructor() {\n    this.solid = false;\n    this.color = null;\n  }\n}\nclass GameManagerService {\n  constructor() {\n    this.settings = {\n      tileSize: null\n    };\n    this._gridSize = {\n      width: 0,\n      height: 0\n    };\n    this._locked = true;\n    this._lineCleared = new Subject();\n    this._gameOver = new Subject();\n    this._keepMovingDown = false;\n    this.lineCleared$ = this._lineCleared.asObservable();\n    this.gameOver$ = this._gameOver.asObservable();\n  }\n  get elementsInRow() {\n    return this._gridSize.width;\n  }\n  initialize(width, height, gameSpeed, tileSize) {\n    this._gridSize.width = width;\n    this._gridSize.height = height;\n    this._gameSpeed = gameSpeed;\n    this._piecesFactory = new PiecesFactory(this._gridSize);\n    if (tileSize) {\n      this.settings.tileSize = tileSize;\n    }\n    this._initializeEmptyBoard();\n    this._spawnNewPiece();\n    this._drawPiece();\n  }\n  start() {\n    clearInterval(this._gameInterval);\n    this._gameInterval = setInterval(() => {\n      this._update();\n    }, this._gameSpeed);\n    this._locked = false;\n  }\n  stop() {\n    this._locked = true;\n    clearInterval(this._gameInterval);\n  }\n  reset() {\n    const emptyTile = new Tile();\n    for (let pos = 0; pos < this.grid.length; pos++) {\n      if (this.grid[pos].color || this.grid[pos].solid) {\n        this.__changeCell(pos, emptyTile);\n      }\n    }\n    this._spawnNewPiece();\n    this._drawPiece();\n  }\n  moveLeft() {\n    if (this._locked) {\n      return;\n    }\n    this._clearPiece();\n    this._piece.store();\n    this._piece.moveLeft();\n    if (this._collidesLeft()) {\n      this._piece.revert();\n    }\n    this._drawPiece();\n  }\n  moveRight() {\n    if (this._locked) {\n      return;\n    }\n    this._clearPiece();\n    this._piece.store();\n    this._piece.moveRight();\n    if (this._collidesRight()) {\n      this._piece.revert();\n    }\n    this._drawPiece();\n  }\n  drop() {\n    if (this._locked) {\n      return;\n    }\n    this._keepMovingDown = true;\n    while (!this._collidesBottom() && this._keepMovingDown) {\n      this._update();\n    }\n  }\n  rotate() {\n    if (this._locked) {\n      return;\n    }\n    this._clearPiece();\n    this._piece.store();\n    this._piece.rotate();\n    while (this._collidesRight()) {\n      this._piece.moveLeft();\n      if (this._collidesLeft()) {\n        this._piece.revert();\n        break;\n      }\n    }\n    this._drawPiece();\n  }\n  moveDown() {\n    this._update();\n  }\n  _clearFullLines() {\n    for (let row = this._gridSize.height - 1; row >= 0; row--) {\n      let isFull = true;\n      for (let col = 0; col < this._gridSize.width; col++) {\n        const pos = row * this._gridSize.width + col;\n        if (this.grid[pos].solid === false) {\n          isFull = false;\n          break;\n        }\n      }\n      if (isFull) {\n        const emptyRow = Array.apply(null, Array(this._gridSize.width)).map(idx => new Tile());\n        const topPortion = this.grid.slice(0, row * this._gridSize.width);\n        this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));\n        this._lineCleared.next();\n      }\n    }\n  }\n  _update() {\n    if (this._locked) {\n      return;\n    }\n    this._locked = true;\n    this._piece.revert();\n    this._clearPiece();\n    this._piece.store();\n    this._piece.moveDown();\n    if (this._collidesBottom()) {\n      this._keepMovingDown = false;\n      this._piece.revert();\n      this._markSolid();\n      this._drawPiece();\n      this._clearFullLines();\n      this._spawnNewPiece();\n      if (this._isGameOver()) {\n        this._onGameOver();\n        return;\n      }\n    }\n    this._drawPiece();\n    this._locked = false;\n  }\n  _isGameOver() {\n    this._piece.store();\n    this._piece.moveDown();\n    if (this._collidesBottom()) {\n      return true;\n    }\n    this._piece.revert();\n    return false;\n  }\n  _onGameOver() {\n    this.stop();\n    this._gameOver.next();\n  }\n  _spawnNewPiece() {\n    this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);\n  }\n  _initializeEmptyBoard() {\n    const cellsCount = this._gridSize.width * this._gridSize.height;\n    this.grid = Array.apply(null, Array(cellsCount)).map(idx => new Tile());\n  }\n  _clearPiece() {\n    this._piece.positionsOnGrid.forEach(pos => {\n      this.__changeCell(pos, {\n        color: undefined\n      });\n    });\n  }\n  _drawPiece() {\n    this._piece.clearStore();\n    this._piece.positionsOnGrid.forEach(pos => {\n      this.__changeCell(pos, {\n        color: this._piece.color\n      });\n    });\n  }\n  _markSolid() {\n    this._piece.positionsOnGrid.forEach(pos => {\n      this.__changeCell(pos, {\n        solid: true\n      });\n    });\n  }\n  __changeCell(pos, data = {}) {\n    this.grid[pos] = Object.assign({}, this.grid[pos], data);\n  }\n  _collidesBottom() {\n    if (this._piece.bottomRow >= this._gridSize.height) {\n      return true;\n    }\n    return this.__collides();\n  }\n  _collidesLeft() {\n    if (this._piece.leftCol < 0) {\n      return true;\n    }\n    return this.__collides();\n  }\n  _collidesRight() {\n    if (this._piece.rightCol >= this._gridSize.width) {\n      return true;\n    }\n    return this.__collides();\n  }\n  __collides() {\n    return this._piece.positionsOnGrid.some(pos => {\n      if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {\n        return true;\n      }\n      return false;\n    });\n  }\n}\nGameManagerService.ɵfac = function GameManagerService_Factory(t) {\n  return new (t || GameManagerService)();\n};\nGameManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GameManagerService,\n  factory: GameManagerService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GameManagerService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nclass TileComponent {\n  constructor(el, _renderer, _manager) {\n    this.el = el;\n    this._renderer = _renderer;\n    this._manager = _manager;\n    this.tileSize = null;\n    if (this._manager.settings.tileSize) {\n      this.tileSize = this._manager.settings.tileSize;\n    }\n  }\n  ngOnInit() {\n    if (this.data.color) {\n      this._renderer.addClass(this.el.nativeElement, this.data.color);\n    }\n  }\n}\nTileComponent.ɵfac = function TileComponent_Factory(t) {\n  return new (t || TileComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(GameManagerService));\n};\nTileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TileComponent,\n  selectors: [[\"tile\"]],\n  hostVars: 4,\n  hostBindings: function TileComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.tileSize)(\"height\", ctx.tileSize);\n    }\n  },\n  inputs: {\n    data: \"data\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function TileComponent_Template(rf, ctx) {},\n  styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TileComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tile',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[style.width]': 'tileSize',\n        '[style.height]': 'tileSize'\n      },\n      template: \"\",\n      styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: GameManagerService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\nclass BoardComponent {\n  constructor(_manager, _elRef) {\n    this._manager = _manager;\n    this._elRef = _elRef;\n  }\n  ngAfterViewInit() {\n    if (this._manager.settings.tileSize) {\n      const bb = this.tile.el.nativeElement.getBoundingClientRect();\n      const TILE_MARGIN = 1; //px\n      const oneTileSpace = bb.width + 2 * TILE_MARGIN;\n      const boardWidth = oneTileSpace * this._manager.elementsInRow;\n      this._elRef.nativeElement.style['width'] = boardWidth + 'px';\n    }\n  }\n}\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(GameManagerService), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nBoardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"board\"]],\n  viewQuery: function BoardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TileComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tile = _t.first);\n    }\n  },\n  inputs: {\n    grid: \"grid\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"data\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BoardComponent_tile_0_Template, 1, 1, \"tile\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n    }\n  },\n  dependencies: [TileComponent, i3.NgForOf],\n  styles: [\"[_nghost-%COMP%]{width:290px;display:block}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'board',\n      template: \"<tile *ngFor=\\\"let tileData of grid\\\"\\n    [data]=\\\"tileData\\\">\\n</tile>\\n\",\n      styles: [\":host{width:290px;display:block}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: GameManagerService\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    grid: [{\n      type: Input\n    }],\n    tile: [{\n      type: ViewChild,\n      args: [TileComponent]\n    }]\n  });\n})();\nconst GAME_SPEED = 500;\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\nvar GameState;\n(function (GameState) {\n  GameState[GameState[\"Paused\"] = 0] = \"Paused\";\n  GameState[GameState[\"Started\"] = 1] = \"Started\";\n  GameState[GameState[\"Over\"] = 2] = \"Over\";\n})(GameState || (GameState = {}));\nclass TetrisCoreComponent {\n  constructor(_manager) {\n    this._manager = _manager;\n    this.initialSpeed = GAME_SPEED;\n    this.rotate = false;\n    this.moveLeft = false;\n    this.moveRight = false;\n    this.moveDown = false;\n    this.drop = false;\n    this.start = false;\n    this.stop = false;\n    this.reset = false;\n    this.lineCleared = new EventEmitter();\n    this.gameOver = new EventEmitter();\n    this.state = GameState.Paused;\n    this.gridWidth = 10;\n    this.gridHeight = 20;\n    this._moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\n    this._manager.lineCleared$.subscribe(() => this._onLineCleared());\n    this._manager.gameOver$.subscribe(() => this._onGameOver());\n  }\n  ngOnInit() {\n    this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\n    this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\n    this.grid = this._manager.grid;\n    setInterval(() => {\n      if (this.moveDown) {\n        this._manager.moveDown();\n      }\n    }, this._moveDownSpeed);\n  }\n  ngOnChanges(changes) {\n    if (this._keyPressed(changes['moveLeft'])) {\n      this._manager.moveLeft();\n    } else if (this._keyPressed(changes['moveRight'])) {\n      this._manager.moveRight();\n    } else if (this._keyPressed(changes['drop'])) {\n      this._manager.drop();\n    }\n    if (this._keyPressed(changes['rotate'])) {\n      this._manager.rotate();\n    }\n    if (this._keyPressed(changes['start'])) {\n      this._manager.start();\n    }\n    if (this._keyPressed(changes['stop'])) {\n      this._manager.stop();\n    }\n    if (this._keyPressed(changes['reset'])) {\n      this._manager.reset();\n    }\n  }\n  actionLeft() {\n    this._manager.moveLeft();\n  }\n  actionRight() {\n    this._manager.moveRight();\n  }\n  actionRotate() {\n    this._manager.rotate();\n  }\n  actionDown() {\n    this._manager.moveDown();\n  }\n  actionDrop() {\n    this._manager.drop();\n  }\n  actionReset() {\n    this._manager.reset();\n  }\n  actionStart() {\n    this._manager.start();\n    this.state = GameState.Started;\n  }\n  actionStop() {\n    this._manager.stop();\n    this.state = GameState.Paused;\n  }\n  _keyPressed(key) {\n    return key && key.currentValue && !key.previousValue;\n  }\n  _onLineCleared() {\n    this.lineCleared.emit();\n  }\n  _onGameOver() {\n    this.state = GameState.Over;\n    this.gameOver.emit();\n  }\n}\nTetrisCoreComponent.ɵfac = function TetrisCoreComponent_Factory(t) {\n  return new (t || TetrisCoreComponent)(i0.ɵɵdirectiveInject(GameManagerService));\n};\nTetrisCoreComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TetrisCoreComponent,\n  selectors: [[\"tetris-core\"]],\n  inputs: {\n    tileSize: \"tileSize\",\n    initialSpeed: \"initialSpeed\",\n    rotate: \"rotate\",\n    moveLeft: \"moveLeft\",\n    moveRight: \"moveRight\",\n    moveDown: \"moveDown\",\n    drop: \"drop\",\n    start: \"start\",\n    stop: \"stop\",\n    reset: \"reset\"\n  },\n  outputs: {\n    lineCleared: \"lineCleared\",\n    gameOver: \"gameOver\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"grid\"]],\n  template: function TetrisCoreComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"board\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"grid\", ctx.grid);\n    }\n  },\n  dependencies: [BoardComponent],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TetrisCoreComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tetris-core',\n      template: \"<board\\n    [grid]=\\\"grid\\\"></board>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: GameManagerService\n    }];\n  }, {\n    tileSize: [{\n      type: Input\n    }],\n    initialSpeed: [{\n      type: Input\n    }],\n    rotate: [{\n      type: Input\n    }],\n    moveLeft: [{\n      type: Input\n    }],\n    moveRight: [{\n      type: Input\n    }],\n    moveDown: [{\n      type: Input\n    }],\n    drop: [{\n      type: Input\n    }],\n    start: [{\n      type: Input\n    }],\n    stop: [{\n      type: Input\n    }],\n    reset: [{\n      type: Input\n    }],\n    lineCleared: [{\n      type: Output\n    }],\n    gameOver: [{\n      type: Output\n    }]\n  });\n})();\nclass TetrisCoreModule {}\nTetrisCoreModule.ɵfac = function TetrisCoreModule_Factory(t) {\n  return new (t || TetrisCoreModule)();\n};\nTetrisCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TetrisCoreModule\n});\nTetrisCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [GameManagerService],\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TetrisCoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [TetrisCoreComponent, BoardComponent, TileComponent],\n      providers: [GameManagerService],\n      exports: [TetrisCoreComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-tetris\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GameState, TetrisCoreComponent, TetrisCoreModule };","map":{"version":3,"names":["i0","Injectable","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ViewChild","EventEmitter","Output","NgModule","i3","CommonModule","Subject","PieceRotation","PieceTypes","PieceColors","Piece","constructor","x","y","gridSize","maps","color","rotation","DEG_0","map","_lastConfig","_gridSize","_maps","positionsOnGrid","acc","row","col","pos","width","push","store","clearStore","revert","hasOwnProperty","rotate","keys","Object","idx","indexOf","toString","length","moveDown","moveRight","moveLeft","bottomRow","rightCol","leftCol","MAPS$7","undefined","Box","Dot","MAPS$6","MAPS$5","Line","DEG_90","MAPS$4","T","DEG_180","DEG_270","MAPS$3","Z","MAPS$2","S","MAPS$1","L","MAPS","Lr","PiecesFactory","_available","getRandomPiecePiece","Math","floor","random","SPAWN_POSITION_X","SPAWN_POSITION_Y","Tile","solid","GameManagerService","settings","tileSize","height","_locked","_lineCleared","_gameOver","_keepMovingDown","lineCleared$","asObservable","gameOver$","elementsInRow","initialize","gameSpeed","_gameSpeed","_piecesFactory","_initializeEmptyBoard","_spawnNewPiece","_drawPiece","start","clearInterval","_gameInterval","setInterval","_update","stop","reset","emptyTile","grid","__changeCell","_clearPiece","_piece","_collidesLeft","_collidesRight","drop","_collidesBottom","_clearFullLines","isFull","emptyRow","Array","apply","topPortion","slice","splice","concat","next","_markSolid","_isGameOver","_onGameOver","cellsCount","forEach","data","assign","__collides","some","ɵfac","ɵprov","type","TileComponent","el","_renderer","_manager","ngOnInit","addClass","nativeElement","ElementRef","Renderer2","ɵcmp","args","selector","encapsulation","None","changeDetection","OnPush","host","template","styles","BoardComponent","_elRef","ngAfterViewInit","bb","tile","getBoundingClientRect","TILE_MARGIN","oneTileSpace","boardWidth","style","NgForOf","GAME_SPEED","MOVE_DOWN_SPEED","GameState","TetrisCoreComponent","initialSpeed","lineCleared","gameOver","state","Paused","gridWidth","gridHeight","_moveDownSpeed","subscribe","_onLineCleared","ngOnChanges","changes","_keyPressed","actionLeft","actionRight","actionRotate","actionDown","actionDrop","actionReset","actionStart","Started","actionStop","key","currentValue","previousValue","emit","Over","TetrisCoreModule","ɵmod","ɵinj","imports","declarations","providers","exports"],"sources":["C:/Users/Tasnim/OneDrive/Desktop/Tetris/Hello/front/node_modules/ngx-tetris/fesm2020/ngx-tetris.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs/internal/Subject';\n\nvar PieceRotation;\n(function (PieceRotation) {\n    PieceRotation[PieceRotation[\"DEG_0\"] = 0] = \"DEG_0\";\n    PieceRotation[PieceRotation[\"DEG_90\"] = 1] = \"DEG_90\";\n    PieceRotation[PieceRotation[\"DEG_180\"] = 2] = \"DEG_180\";\n    PieceRotation[PieceRotation[\"DEG_270\"] = 3] = \"DEG_270\";\n})(PieceRotation || (PieceRotation = {}));\nvar PieceTypes;\n(function (PieceTypes) {\n    PieceTypes[PieceTypes[\"Dot\"] = 1] = \"Dot\";\n    PieceTypes[PieceTypes[\"Box\"] = 2] = \"Box\";\n    PieceTypes[PieceTypes[\"Line\"] = 3] = \"Line\";\n    PieceTypes[PieceTypes[\"T\"] = 4] = \"T\";\n    PieceTypes[PieceTypes[\"L\"] = 5] = \"L\";\n    PieceTypes[PieceTypes[\"Lr\"] = 6] = \"Lr\";\n    PieceTypes[PieceTypes[\"Z\"] = 7] = \"Z\";\n    PieceTypes[PieceTypes[\"S\"] = 8] = \"S\";\n})(PieceTypes || (PieceTypes = {}));\n// picked from https://www.romanzolotarev.com/pico-8-color-palette/\nvar PieceColors;\n(function (PieceColors) {\n    PieceColors[\"Box\"] = \"color-box\";\n    PieceColors[\"Dot\"] = \"color-dot\";\n    PieceColors[\"Line\"] = \"color-line\";\n    PieceColors[\"T\"] = \"color-t\";\n    PieceColors[\"L\"] = \"color-l\";\n    PieceColors[\"Lr\"] = \"color-lr\";\n    PieceColors[\"Z\"] = \"color-z\";\n    PieceColors[\"S\"] = \"color-s\";\n})(PieceColors || (PieceColors = {}));\nclass Piece {\n    constructor(x, y, gridSize, maps) {\n        this.color = 'red';\n        this.rotation = PieceRotation.DEG_0;\n        this.map = [\n            [], []\n        ];\n        this._lastConfig = null;\n        this._gridSize = gridSize;\n        this.x = x;\n        this.y = y;\n        this._maps = maps;\n        this.map = this._maps[this.rotation];\n    }\n    get positionsOnGrid() {\n        const acc = [];\n        for (let row = 0; row < 4; row++) {\n            for (let col = 0; col < 4; col++) {\n                if (this.map[row][col]) {\n                    const pos = (this.y + row) * this._gridSize.width + this.x + col;\n                    if (pos > 0) {\n                        acc.push(pos);\n                    }\n                }\n            }\n        }\n        return acc;\n    }\n    store() {\n        this._lastConfig = {\n            x: this.x,\n            y: this.y,\n            rotation: this.rotation,\n            map: this.map\n        };\n    }\n    clearStore() {\n        this._lastConfig = null;\n    }\n    revert() {\n        if (this._lastConfig) {\n            for (const x in this._lastConfig) {\n                if (this._lastConfig.hasOwnProperty(x)) {\n                    // @ts-ignore\n                    this[x] = this._lastConfig[x];\n                }\n            }\n            this._lastConfig = null;\n        }\n    }\n    rotate() {\n        const keys = Object.keys(this._maps);\n        let idx = keys.indexOf(this.rotation.toString());\n        if (idx >= keys.length - 1) {\n            this.rotation = keys[0];\n        }\n        else {\n            this.rotation = keys[++idx];\n        }\n        this.map = this._maps[this.rotation];\n    }\n    moveDown() {\n        this.y++;\n    }\n    moveRight() {\n        this.x++;\n    }\n    moveLeft() {\n        this.x--;\n    }\n    get bottomRow() {\n        return this.y + 3;\n    }\n    get rightCol() {\n        let col = 3;\n        while (col >= 0) {\n            for (let row = 0; row <= 3; row++) {\n                if (this.map[row][col]) {\n                    return this.x + col;\n                }\n            }\n            col--;\n        }\n        return 0;\n    }\n    get leftCol() {\n        return this.x;\n    }\n}\n\nconst MAPS$7 = [];\nMAPS$7[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Box, undefined, undefined, undefined],\n];\nclass Dot extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$7);\n        this.color = PieceColors['Dot'];\n    }\n}\n\nconst MAPS$6 = [];\nMAPS$6[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Box, PieceTypes.Box, undefined, undefined],\n    [PieceTypes.Box, PieceTypes.Box, undefined, undefined],\n];\nclass Box extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$6);\n        this.color = PieceColors['Box'];\n    }\n}\n\nconst MAPS$5 = [];\nMAPS$5[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Line, PieceTypes.Line, PieceTypes.Line, PieceTypes.Line],\n];\nMAPS$5[PieceRotation.DEG_90] = [\n    [PieceTypes.Line, undefined, undefined, undefined],\n    [PieceTypes.Line, undefined, undefined, undefined],\n    [PieceTypes.Line, undefined, undefined, undefined],\n    [PieceTypes.Line, undefined, undefined, undefined],\n];\nclass Line extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$5);\n        this.color = PieceColors['Line'];\n    }\n}\n\nconst MAPS$4 = [];\nMAPS$4[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],\n];\nMAPS$4[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.T, undefined, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, undefined, undefined],\n    [PieceTypes.T, undefined, undefined, undefined],\n];\nMAPS$4[PieceRotation.DEG_180] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n];\nMAPS$4[PieceRotation.DEG_270] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, undefined, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n];\nclass T extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$4);\n        this.color = PieceColors['T'];\n    }\n}\n\nconst MAPS$3 = [];\nMAPS$3[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.Z, undefined, undefined],\n    [PieceTypes.Z, PieceTypes.Z, undefined, undefined],\n    [PieceTypes.Z, undefined, undefined, undefined],\n];\nMAPS$3[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Z, PieceTypes.Z, undefined, undefined],\n    [undefined, PieceTypes.Z, PieceTypes.Z, undefined],\n];\nclass Z extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$3);\n        this.color = PieceColors['Z'];\n    }\n}\n\nconst MAPS$2 = [];\nMAPS$2[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.S, undefined, undefined, undefined],\n    [PieceTypes.S, PieceTypes.S, undefined, undefined],\n    [undefined, PieceTypes.S, undefined, undefined],\n];\nMAPS$2[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.S, PieceTypes.S, undefined],\n    [PieceTypes.S, PieceTypes.S, undefined, undefined],\n];\nclass S extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$2);\n        this.color = PieceColors['S'];\n    }\n}\n\nconst MAPS$1 = [];\nMAPS$1[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.L, undefined, undefined, undefined],\n    [PieceTypes.L, undefined, undefined, undefined],\n    [PieceTypes.L, PieceTypes.L, undefined, undefined],\n];\nMAPS$1[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],\n    [PieceTypes.L, undefined, undefined, undefined],\n];\nMAPS$1[PieceRotation.DEG_180] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.L, PieceTypes.L, undefined, undefined],\n    [undefined, PieceTypes.L, undefined, undefined],\n    [undefined, PieceTypes.L, undefined, undefined],\n];\nMAPS$1[PieceRotation.DEG_270] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, PieceTypes.L, undefined],\n    [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],\n];\nclass L extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$1);\n        this.color = PieceColors['L'];\n    }\n}\n\nconst MAPS = [];\nMAPS[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],\n    [undefined, PieceTypes.Lr, undefined, undefined],\n    [undefined, PieceTypes.Lr, undefined, undefined],\n];\nMAPS[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, PieceTypes.Lr, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],\n];\nMAPS[PieceRotation.DEG_180] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Lr, undefined, undefined, undefined],\n    [PieceTypes.Lr, undefined, undefined, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],\n];\nMAPS[PieceRotation.DEG_270] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],\n    [PieceTypes.Lr, undefined, undefined, undefined],\n];\nclass Lr extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS);\n        this.color = PieceColors['Lr'];\n    }\n}\n\nclass PiecesFactory {\n    constructor(_gridSize) {\n        this._gridSize = _gridSize;\n        this._available = [];\n        // @ts-ignore\n        this._available.push(Dot);\n        // @ts-ignore\n        this._available.push(Box);\n        // @ts-ignore\n        this._available.push(Line);\n        // @ts-ignore\n        this._available.push(T);\n        // @ts-ignore\n        this._available.push(Z);\n        // @ts-ignore\n        this._available.push(S);\n        // @ts-ignore\n        this._available.push(L);\n        // @ts-ignore\n        this._available.push(Lr);\n    }\n    getRandomPiecePiece(x, y) {\n        const idx = Math.floor(Math.random() * (this._available.length));\n        // @ts-ignore\n        return new this._available[idx](x, y, this._gridSize);\n        // return new this._available[2](x, y, this._gridSize);\n    }\n}\n\nconst SPAWN_POSITION_X = 4;\nconst SPAWN_POSITION_Y = -4;\nclass Tile {\n    constructor() {\n        this.solid = false;\n        this.color = null;\n    }\n}\nclass GameManagerService {\n    constructor() {\n        this.settings = {\n            tileSize: null\n        };\n        this._gridSize = { width: 0, height: 0 };\n        this._locked = true;\n        this._lineCleared = new Subject();\n        this._gameOver = new Subject();\n        this._keepMovingDown = false;\n        this.lineCleared$ = this._lineCleared.asObservable();\n        this.gameOver$ = this._gameOver.asObservable();\n    }\n    get elementsInRow() {\n        return this._gridSize.width;\n    }\n    initialize(width, height, gameSpeed, tileSize) {\n        this._gridSize.width = width;\n        this._gridSize.height = height;\n        this._gameSpeed = gameSpeed;\n        this._piecesFactory = new PiecesFactory(this._gridSize);\n        if (tileSize) {\n            this.settings.tileSize = tileSize;\n        }\n        this._initializeEmptyBoard();\n        this._spawnNewPiece();\n        this._drawPiece();\n    }\n    start() {\n        clearInterval(this._gameInterval);\n        this._gameInterval = setInterval(() => {\n            this._update();\n        }, this._gameSpeed);\n        this._locked = false;\n    }\n    stop() {\n        this._locked = true;\n        clearInterval(this._gameInterval);\n    }\n    reset() {\n        const emptyTile = new Tile();\n        for (let pos = 0; pos < this.grid.length; pos++) {\n            if (this.grid[pos].color || this.grid[pos].solid) {\n                this.__changeCell(pos, emptyTile);\n            }\n        }\n        this._spawnNewPiece();\n        this._drawPiece();\n    }\n    moveLeft() {\n        if (this._locked) {\n            return;\n        }\n        this._clearPiece();\n        this._piece.store();\n        this._piece.moveLeft();\n        if (this._collidesLeft()) {\n            this._piece.revert();\n        }\n        this._drawPiece();\n    }\n    moveRight() {\n        if (this._locked) {\n            return;\n        }\n        this._clearPiece();\n        this._piece.store();\n        this._piece.moveRight();\n        if (this._collidesRight()) {\n            this._piece.revert();\n        }\n        this._drawPiece();\n    }\n    drop() {\n        if (this._locked) {\n            return;\n        }\n        this._keepMovingDown = true;\n        while (!this._collidesBottom() && this._keepMovingDown) {\n            this._update();\n        }\n    }\n    rotate() {\n        if (this._locked) {\n            return;\n        }\n        this._clearPiece();\n        this._piece.store();\n        this._piece.rotate();\n        while (this._collidesRight()) {\n            this._piece.moveLeft();\n            if (this._collidesLeft()) {\n                this._piece.revert();\n                break;\n            }\n        }\n        this._drawPiece();\n    }\n    moveDown() {\n        this._update();\n    }\n    _clearFullLines() {\n        for (let row = this._gridSize.height - 1; row >= 0; row--) {\n            let isFull = true;\n            for (let col = 0; col < this._gridSize.width; col++) {\n                const pos = row * this._gridSize.width + col;\n                if (this.grid[pos].solid === false) {\n                    isFull = false;\n                    break;\n                }\n            }\n            if (isFull) {\n                const emptyRow = Array.apply(null, Array(this._gridSize.width))\n                    .map((idx) => new Tile());\n                const topPortion = this.grid.slice(0, row * this._gridSize.width);\n                this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));\n                this._lineCleared.next();\n            }\n        }\n    }\n    _update() {\n        if (this._locked) {\n            return;\n        }\n        this._locked = true;\n        this._piece.revert();\n        this._clearPiece();\n        this._piece.store();\n        this._piece.moveDown();\n        if (this._collidesBottom()) {\n            this._keepMovingDown = false;\n            this._piece.revert();\n            this._markSolid();\n            this._drawPiece();\n            this._clearFullLines();\n            this._spawnNewPiece();\n            if (this._isGameOver()) {\n                this._onGameOver();\n                return;\n            }\n        }\n        this._drawPiece();\n        this._locked = false;\n    }\n    _isGameOver() {\n        this._piece.store();\n        this._piece.moveDown();\n        if (this._collidesBottom()) {\n            return true;\n        }\n        this._piece.revert();\n        return false;\n    }\n    _onGameOver() {\n        this.stop();\n        this._gameOver.next();\n    }\n    _spawnNewPiece() {\n        this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);\n    }\n    _initializeEmptyBoard() {\n        const cellsCount = this._gridSize.width * this._gridSize.height;\n        this.grid = Array.apply(null, Array(cellsCount))\n            .map((idx) => new Tile());\n    }\n    _clearPiece() {\n        this._piece.positionsOnGrid\n            .forEach((pos) => {\n            this.__changeCell(pos, { color: undefined });\n        });\n    }\n    _drawPiece() {\n        this._piece.clearStore();\n        this._piece.positionsOnGrid\n            .forEach((pos) => {\n            this.__changeCell(pos, { color: this._piece.color });\n        });\n    }\n    _markSolid() {\n        this._piece.positionsOnGrid.forEach((pos) => {\n            this.__changeCell(pos, { solid: true });\n        });\n    }\n    __changeCell(pos, data = {}) {\n        this.grid[pos] = Object.assign({}, this.grid[pos], data);\n    }\n    _collidesBottom() {\n        if (this._piece.bottomRow >= this._gridSize.height) {\n            return true;\n        }\n        return this.__collides();\n    }\n    _collidesLeft() {\n        if (this._piece.leftCol < 0) {\n            return true;\n        }\n        return this.__collides();\n    }\n    _collidesRight() {\n        if (this._piece.rightCol >= this._gridSize.width) {\n            return true;\n        }\n        return this.__collides();\n    }\n    __collides() {\n        return this._piece.positionsOnGrid\n            .some((pos) => {\n            if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {\n                return true;\n            }\n            return false;\n        });\n    }\n}\nGameManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: GameManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nGameManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: GameManagerService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: GameManagerService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nclass TileComponent {\n    constructor(el, _renderer, _manager) {\n        this.el = el;\n        this._renderer = _renderer;\n        this._manager = _manager;\n        this.tileSize = null;\n        if (this._manager.settings.tileSize) {\n            this.tileSize = this._manager.settings.tileSize;\n        }\n    }\n    ngOnInit() {\n        if (this.data.color) {\n            this._renderer.addClass(this.el.nativeElement, this.data.color);\n        }\n    }\n}\nTileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TileComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: GameManagerService }], target: i0.ɵɵFactoryTarget.Component });\nTileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: TileComponent, selector: \"tile\", inputs: { data: \"data\" }, host: { properties: { \"style.width\": \"tileSize\", \"style.height\": \"tileSize\" } }, ngImport: i0, template: \"\", styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TileComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tile', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        '[style.width]': 'tileSize',\n                        '[style.height]': 'tileSize'\n                    }, template: \"\", styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: GameManagerService }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\nclass BoardComponent {\n    constructor(_manager, _elRef) {\n        this._manager = _manager;\n        this._elRef = _elRef;\n    }\n    ngAfterViewInit() {\n        if (this._manager.settings.tileSize) {\n            const bb = this.tile.el.nativeElement.getBoundingClientRect();\n            const TILE_MARGIN = 1; //px\n            const oneTileSpace = bb.width + 2 * TILE_MARGIN;\n            const boardWidth = oneTileSpace * this._manager.elementsInRow;\n            this._elRef.nativeElement.style['width'] = boardWidth + 'px';\n        }\n    }\n}\nBoardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BoardComponent, deps: [{ token: GameManagerService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBoardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: BoardComponent, selector: \"board\", inputs: { grid: \"grid\" }, viewQueries: [{ propertyName: \"tile\", first: true, predicate: TileComponent, descendants: true }], ngImport: i0, template: \"<tile *ngFor=\\\"let tileData of grid\\\"\\n    [data]=\\\"tileData\\\">\\n</tile>\\n\", styles: [\":host{width:290px;display:block}\\n\"], components: [{ type: TileComponent, selector: \"tile\", inputs: [\"data\"] }], directives: [{ type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BoardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'board', template: \"<tile *ngFor=\\\"let tileData of grid\\\"\\n    [data]=\\\"tileData\\\">\\n</tile>\\n\", styles: [\":host{width:290px;display:block}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: GameManagerService }, { type: i0.ElementRef }]; }, propDecorators: { grid: [{\n                type: Input\n            }], tile: [{\n                type: ViewChild,\n                args: [TileComponent]\n            }] } });\n\nconst GAME_SPEED = 500;\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\nvar GameState;\n(function (GameState) {\n    GameState[GameState[\"Paused\"] = 0] = \"Paused\";\n    GameState[GameState[\"Started\"] = 1] = \"Started\";\n    GameState[GameState[\"Over\"] = 2] = \"Over\";\n})(GameState || (GameState = {}));\nclass TetrisCoreComponent {\n    constructor(_manager) {\n        this._manager = _manager;\n        this.initialSpeed = GAME_SPEED;\n        this.rotate = false;\n        this.moveLeft = false;\n        this.moveRight = false;\n        this.moveDown = false;\n        this.drop = false;\n        this.start = false;\n        this.stop = false;\n        this.reset = false;\n        this.lineCleared = new EventEmitter();\n        this.gameOver = new EventEmitter();\n        this.state = GameState.Paused;\n        this.gridWidth = 10;\n        this.gridHeight = 20;\n        this._moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\n        this._manager.lineCleared$.subscribe(() => this._onLineCleared());\n        this._manager.gameOver$.subscribe(() => this._onGameOver());\n    }\n    ngOnInit() {\n        this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\n        this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\n        this.grid = this._manager.grid;\n        setInterval(() => {\n            if (this.moveDown) {\n                this._manager.moveDown();\n            }\n        }, this._moveDownSpeed);\n    }\n    ngOnChanges(changes) {\n        if (this._keyPressed(changes['moveLeft'])) {\n            this._manager.moveLeft();\n        }\n        else if (this._keyPressed(changes['moveRight'])) {\n            this._manager.moveRight();\n        }\n        else if (this._keyPressed(changes['drop'])) {\n            this._manager.drop();\n        }\n        if (this._keyPressed(changes['rotate'])) {\n            this._manager.rotate();\n        }\n        if (this._keyPressed(changes['start'])) {\n            this._manager.start();\n        }\n        if (this._keyPressed(changes['stop'])) {\n            this._manager.stop();\n        }\n        if (this._keyPressed(changes['reset'])) {\n            this._manager.reset();\n        }\n    }\n    actionLeft() { this._manager.moveLeft(); }\n    actionRight() { this._manager.moveRight(); }\n    actionRotate() { this._manager.rotate(); }\n    actionDown() { this._manager.moveDown(); }\n    actionDrop() { this._manager.drop(); }\n    actionReset() { this._manager.reset(); }\n    actionStart() {\n        this._manager.start();\n        this.state = GameState.Started;\n    }\n    actionStop() {\n        this._manager.stop();\n        this.state = GameState.Paused;\n    }\n    _keyPressed(key) {\n        return key && key.currentValue && !key.previousValue;\n    }\n    _onLineCleared() {\n        this.lineCleared.emit();\n    }\n    _onGameOver() {\n        this.state = GameState.Over;\n        this.gameOver.emit();\n    }\n}\nTetrisCoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreComponent, deps: [{ token: GameManagerService }], target: i0.ɵɵFactoryTarget.Component });\nTetrisCoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: TetrisCoreComponent, selector: \"tetris-core\", inputs: { tileSize: \"tileSize\", initialSpeed: \"initialSpeed\", rotate: \"rotate\", moveLeft: \"moveLeft\", moveRight: \"moveRight\", moveDown: \"moveDown\", drop: \"drop\", start: \"start\", stop: \"stop\", reset: \"reset\" }, outputs: { lineCleared: \"lineCleared\", gameOver: \"gameOver\" }, usesOnChanges: true, ngImport: i0, template: \"<board\\n    [grid]=\\\"grid\\\"></board>\\n\", components: [{ type: BoardComponent, selector: \"board\", inputs: [\"grid\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tetris-core', template: \"<board\\n    [grid]=\\\"grid\\\"></board>\\n\" }]\n        }], ctorParameters: function () { return [{ type: GameManagerService }]; }, propDecorators: { tileSize: [{\n                type: Input\n            }], initialSpeed: [{\n                type: Input\n            }], rotate: [{\n                type: Input\n            }], moveLeft: [{\n                type: Input\n            }], moveRight: [{\n                type: Input\n            }], moveDown: [{\n                type: Input\n            }], drop: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], stop: [{\n                type: Input\n            }], reset: [{\n                type: Input\n            }], lineCleared: [{\n                type: Output\n            }], gameOver: [{\n                type: Output\n            }] } });\n\nclass TetrisCoreModule {\n}\nTetrisCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTetrisCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, declarations: [TetrisCoreComponent,\n        BoardComponent,\n        TileComponent], imports: [CommonModule], exports: [TetrisCoreComponent] });\nTetrisCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, providers: [\n        GameManagerService\n    ], imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        TetrisCoreComponent,\n                        BoardComponent,\n                        TileComponent\n                    ],\n                    providers: [\n                        GameManagerService\n                    ],\n                    exports: [TetrisCoreComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-tetris\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GameState, TetrisCoreComponent, TetrisCoreModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}