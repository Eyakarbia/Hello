{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/game-manager.service\";\nimport * as i2 from \"./board/board.component\";\nconst GAME_SPEED = 500;\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\nexport var GameState;\n(function (GameState) {\n  GameState[GameState[\"Paused\"] = 0] = \"Paused\";\n  GameState[GameState[\"Started\"] = 1] = \"Started\";\n  GameState[GameState[\"Over\"] = 2] = \"Over\";\n})(GameState || (GameState = {}));\nexport class TetrisCoreComponent {\n  constructor(_manager) {\n    this._manager = _manager;\n    this.initialSpeed = GAME_SPEED;\n    this.rotate = false;\n    this.moveLeft = false;\n    this.moveRight = false;\n    this.moveDown = false;\n    this.drop = false;\n    this.start = false;\n    this.stop = false;\n    this.reset = false;\n    this.lineCleared = new EventEmitter();\n    this.gameOver = new EventEmitter();\n    this.state = GameState.Paused;\n    this.level = 1; // Initial level\n    this.gameSpeed = 500; // initial game speed\n    this.gridWidth = 10;\n    this.gridHeight = 20;\n    this._moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\n    this._manager.lineCleared$.subscribe(() => this._onLineCleared());\n    this._manager.gameOver$.subscribe(() => this._onGameOver());\n  }\n  updateGameInterval() {\n    if (this.gameInterval) {\n      clearInterval(this.gameInterval);\n    }\n    this.gameInterval = setInterval(() => {\n      if (this.moveDown) {\n        this._manager.moveDown();\n      }\n    }, this.initialSpeed);\n  }\n  ngOnInit() {\n    this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\n    this.updateGameInterval();\n    this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\n    this.grid = this._manager.grid;\n  }\n  ngOnChanges(changes) {\n    if (this._keyPressed(changes['moveLeft'])) {\n      this._manager.moveLeft();\n    } else if (this._keyPressed(changes['moveRight'])) {\n      this._manager.moveRight();\n    } else if (this._keyPressed(changes['drop'])) {\n      this._manager.drop();\n    }\n    if (this._keyPressed(changes['rotate'])) {\n      this._manager.rotate();\n    }\n    if (this._keyPressed(changes['start'])) {\n      this._manager.start();\n    }\n    if (this._keyPressed(changes['stop'])) {\n      this._manager.stop();\n    }\n    if (this._keyPressed(changes['reset'])) {\n      this._manager.reset();\n    }\n  }\n  actionLeft() {\n    this._manager.moveLeft();\n  }\n  actionRight() {\n    this._manager.moveRight();\n  }\n  actionRotate() {\n    this._manager.rotate();\n  }\n  actionDown() {\n    this._manager.moveDown();\n  }\n  actionDrop() {\n    this._manager.drop();\n  }\n  actionReset() {\n    clearInterval(this.gameInterval);\n    this._manager.reset();\n  }\n  actionStart() {\n    this._manager.start();\n    this.state = GameState.Started;\n  }\n  actionStop() {\n    if (this.state === GameState.Started) {\n      this._manager.stop(); // Stop the game\n      this.state = GameState.Paused; // Update state to Paused\n    } else if (this.state === GameState.Paused) {\n      this._manager.start(); // Resume the game\n      this.state = GameState.Started; // Update state to Started\n    }\n  }\n\n  _keyPressed(key) {\n    return key && key.currentValue && !key.previousValue;\n  }\n  _onLineCleared() {\n    this.lineCleared.emit();\n    // Increase the speed of the game\n    const speedIncreaseFactor = 0.9; // For example, 10% speed increase\n    this.initialSpeed *= speedIncreaseFactor;\n    // Update the game interval with the new speed\n    this.updateGameInterval();\n  }\n  _onGameOver() {\n    clearInterval(this.gameInterval);\n    this.state = GameState.Over;\n    this.gameOver.emit();\n  }\n  static #_ = this.ɵfac = function TetrisCoreComponent_Factory(t) {\n    return new (t || TetrisCoreComponent)(i0.ɵɵdirectiveInject(i1.GameManagerService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TetrisCoreComponent,\n    selectors: [[\"tetris-core\"]],\n    inputs: {\n      tileSize: \"tileSize\",\n      initialSpeed: \"initialSpeed\",\n      rotate: \"rotate\",\n      moveLeft: \"moveLeft\",\n      moveRight: \"moveRight\",\n      moveDown: \"moveDown\",\n      drop: \"drop\",\n      start: \"start\",\n      stop: \"stop\",\n      reset: \"reset\"\n    },\n    outputs: {\n      lineCleared: \"lineCleared\",\n      gameOver: \"gameOver\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"grid\"]],\n    template: function TetrisCoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"board\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"grid\", ctx.grid);\n      }\n    },\n    dependencies: [i2.BoardComponent],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","GAME_SPEED","MOVE_DOWN_SPEED","GameState","TetrisCoreComponent","constructor","_manager","Paused","lineCleared$","subscribe","_onLineCleared","gameOver$","_onGameOver","updateGameInterval","gameInterval","clearInterval","setInterval","moveDown","initialSpeed","ngOnInit","_moveDownSpeed","initialize","gridWidth","gridHeight","tileSize","grid","ngOnChanges","changes","_keyPressed","moveLeft","moveRight","drop","rotate","start","stop","reset","actionLeft","actionRight","actionRotate","actionDown","actionDrop","actionReset","actionStart","state","Started","actionStop","key","currentValue","previousValue","lineCleared","emit","speedIncreaseFactor","Over","gameOver","selectors","inputs","outputs","features","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Tasnim\\OneDrive\\Desktop\\Tetris\\Hello\\front\\ngx-tetris\\src\\lib\\tetris-core.component.ts","C:\\Users\\Tasnim\\OneDrive\\Desktop\\Tetris\\Hello\\front\\ngx-tetris\\src\\lib\\tetris-core.component.html"],"sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output, SimpleChange,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport {GameManagerService, Tile} from './services/game-manager.service';\r\n\r\nconst GAME_SPEED = 500;\r\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\r\n\r\nexport enum GameState {\r\n    Paused = 0,\r\n    Started = 1,\r\n    Over = 2\r\n}\r\n\r\n@Component({\r\n    selector: 'tetris-core',\r\n    templateUrl: './tetris-core.component.html',\r\n    // styleUrls: ['./tetris-core.component.css']\r\n})\r\nexport class TetrisCoreComponent implements OnInit, OnChanges {\r\n    @Input() tileSize: any;\r\n\r\n    @Input() initialSpeed: number = GAME_SPEED;\r\n    @Input() rotate = false;\r\n    @Input() moveLeft = false;\r\n    @Input() moveRight = false;\r\n    @Input() moveDown = false;\r\n    @Input() drop = false;\r\n    @Input() start = false;\r\n    @Input() stop = false;\r\n    @Input() reset = false;\r\n\r\n    @Output() lineCleared: EventEmitter<any> = new EventEmitter();\r\n    @Output() gameOver: EventEmitter<any> = new EventEmitter();\r\n\r\n    public grid!: Array<Tile>;\r\n    public state: GameState = GameState.Paused;\r\n    public level: number = 1; // Initial level\r\n    public gameSpeed: number = 500; // initial game speed\r\n\r\n\r\n    gridWidth = 10;\r\n    gridHeight = 20;\r\n\r\n    private _moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\r\n    private gameInterval: any;\r\n\r\n    private updateGameInterval() {\r\n        if (this.gameInterval) {\r\n            clearInterval(this.gameInterval);\r\n        }\r\n    \r\n        this.gameInterval = setInterval(() => {\r\n            if (this.moveDown) {\r\n                this._manager.moveDown();\r\n            }\r\n        }, this.initialSpeed);\r\n    }\r\n    \r\n    constructor(private _manager: GameManagerService) {\r\n        this._manager.lineCleared$.subscribe(() => this._onLineCleared());\r\n        this._manager.gameOver$.subscribe(() => this._onGameOver());\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\r\n        this.updateGameInterval();\r\n    \r\n        this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\r\n        this.grid = this._manager.grid;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (this._keyPressed(changes['moveLeft'])) {\r\n            this._manager.moveLeft();\r\n        } else if (this._keyPressed(changes['moveRight'])) {\r\n            this._manager.moveRight();\r\n        } else if (this._keyPressed(changes['drop'])) {\r\n            this._manager.drop();\r\n        }\r\n\r\n        if (this._keyPressed(changes['rotate'])) { this._manager.rotate(); }\r\n        if (this._keyPressed(changes['start']))  { this._manager.start(); }\r\n        if (this._keyPressed(changes['stop']))  { this._manager.stop(); }\r\n        if (this._keyPressed(changes['reset']))  { this._manager.reset(); }\r\n      \r\n    }\r\n    \r\n\r\n    public actionLeft() { this._manager.moveLeft(); }\r\n    public actionRight() { this._manager.moveRight(); }\r\n    public actionRotate() { this._manager.rotate(); }\r\n    public actionDown() { this._manager.moveDown(); }\r\n    public actionDrop() { this._manager.drop(); }\r\n    public actionReset() {\r\n        clearInterval(this.gameInterval);\r\n        this._manager.reset();\r\n    }\r\n    \r\n    public actionStart() {\r\n        this._manager.start();\r\n        this.state = GameState.Started;\r\n    }\r\n    public actionStop() {\r\n        if (this.state === GameState.Started) {\r\n            this._manager.stop(); // Stop the game\r\n            this.state = GameState.Paused; // Update state to Paused\r\n        } else if (this.state === GameState.Paused) {\r\n            this._manager.start(); // Resume the game\r\n            this.state = GameState.Started; // Update state to Started\r\n        }\r\n    }\r\n    \r\n\r\n    private _keyPressed(key: SimpleChange) {\r\n        return key && key.currentValue && !key.previousValue;\r\n    }\r\n\r\n    private _onLineCleared() {\r\n        this.lineCleared.emit();\r\n    \r\n        // Increase the speed of the game\r\n        const speedIncreaseFactor = 0.9; // For example, 10% speed increase\r\n        this.initialSpeed *= speedIncreaseFactor;\r\n    \r\n        // Update the game interval with the new speed\r\n        this.updateGameInterval();\r\n    }\r\n    \r\n    \r\n\r\n    private _onGameOver() {\r\n        clearInterval(this.gameInterval);\r\n        this.state = GameState.Over;\r\n        this.gameOver.emit();\r\n    }\r\n    \r\n  \r\n    \r\n   \r\n   \r\n}\r\n","<board\r\n    [grid]=\"grid\"></board>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}